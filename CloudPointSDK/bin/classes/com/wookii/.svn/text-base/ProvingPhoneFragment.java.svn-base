package com.cloudpoint.cpgamespaysdk.activitis;

import java.util.HashMap;
import java.util.regex.Pattern;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.cloudpoint.cpgamespaysdk.protocol.ProvingPhoneProtocol;
import com.cloudpoint.cpgamespaysdk.protocollManager.ProtocolManager;
import com.cloudpoint.cpgamespaysdk.utils.CountDownTimerUtil;
import com.cloudpoint.cpgamespaysdk.utils.DeviceTool;
import com.cloudpoint.cpgamespaysdk.utils.LoginMessageDataUtils;
import com.cloudpoint.cpgamespaysdk.utils.Str_MD5;

/**
 * 验证手机号
 * 
 * @author cloudpoint_android
 * 
 */
public class ProvingPhoneFragment extends Fragment {
	public final static int UserRegisterTel_RESULT_CODE = 2;
	public static final int LOGIN_REQUEST_CODE = 3;
	public static final String YANGZHENGMA = "YZM";
	protected static final int REGISTER_DEVICE = 0x123;
	private LoginAndRegActivity mParentActivity;
	private EditText phoneNumber;
	private String uid;
	private ProtocolManager dataManager;
	private CountDownTimerUtil countDownTimer;
	private Button provingNumber, submit, loginBtn;
	private EditText provingCode;
	private ProgressDialog mDialog;
	private static final int PROVING_PHONE = 0x1001;
	private CheckBox user_agreement_check_box;
	private TextView user_agreement, user_agree;

	public static ProvingPhoneFragment newInstance() {
		return new ProvingPhoneFragment();
	}

	private Handler handler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			dismissDialog();
			switch (msg.what) {
			case ProtocolManager.NOTIFICATION_SUBMIT_GETCODE:
				Toast.makeText(mParentActivity, "验证码已经发至您的手机，请查收。",
						Toast.LENGTH_LONG).show();
				// 倒计时
				if (null == countDownTimer) {
					countDownTimer = new CountDownTimerUtil(handler, 60 * 1000,
							1000);
				}
				countDownTimer.start();
				break;
			case CountDownTimerUtil.TIMER_FINISH:
				provingNumber.setEnabled(true);
				provingNumber.setText("获取验证码");
				break;
			case CountDownTimerUtil.TIMER_TICK:
				provingNumber.setEnabled(false);
				provingNumber.setText("获取验证码(" + msg.arg1 + ")");
				break;
			case PROVING_PHONE:
				Toast.makeText(mParentActivity, "验证成功", Toast.LENGTH_LONG)
						.show();
				LoginMessageDataUtils.inserttelNum(mParentActivity, phoneNumber
						.getText().toString().trim());
				mParentActivity.finish();
				// 完成验证之后打开忘记密码这样的逻辑类似与注册用户了zb的想法
				Intent setPassword = new Intent();
				setPassword.setClass(mParentActivity, SetPasswordActiviy.class);
				setPassword.putExtra("yzCode", msg.obj.toString());
				setPassword.putExtra("phoneNumber", phoneNumber.getText()
						.toString().trim());
				mParentActivity.startActivity(setPassword);

				break;
			case ProtocolManager.NOTIFICATION_RESPONSE_ERRORINFO:
				Toast.makeText(mParentActivity, msg.obj.toString(),
						Toast.LENGTH_LONG).show();
				break;
			case REGISTER_DEVICE:
				LoginMessageDataUtils
						.insertInterimToken(mParentActivity, false);
				HashMap<String, String> dataMap = (HashMap<String, String>) msg.obj;
				String uid = dataMap.get("uid");
//				String token = dataMap.get("token");
				LoginMessageDataUtils.insertUID(mParentActivity, uid);
//				LoginMessageDataUtils.insertToken(mParentActivity, token);
				String userName = phoneNumber.getText().toString().trim();
				mDialog = ProgressDialog.show(mParentActivity, "",
						"正在获取验证码...", true, true);
				dataManager = new ProtocolManager(mParentActivity, handler);
				dataManager.userRegisterTel(userName,
						LoginMessageDataUtils.getUID(mParentActivity));
				break;
			case ProtocolManager.NOTIFICATION_CHECKINFO:
				tipUser();
				break;
			default:
				// super.handleMessage(msg);
				break;
			}

		}
	};

	@Override
	public void onAttach(Activity activity) {
		super.onAttach(activity);
		mParentActivity = (LoginAndRegActivity) activity;
		dataManager = new ProtocolManager(mParentActivity, handler);
		uid = LoginMessageDataUtils.getUID(mParentActivity);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		int layoutId = ResourcesIdFactoryUtils.getLayoutId(
				mParentActivity.getApplicationContext(),
				"cpsdk_proving_phone_layout");
		View view = inflater.inflate(layoutId, container, false);
		phoneNumber = (EditText) view.findViewById(ResourcesIdFactoryUtils
				.getId(mParentActivity.getApplicationContext(),
						"EditId_for_userName"));
		provingCode = (EditText) view
				.findViewById(ResourcesIdFactoryUtils.getId(
						mParentActivity.getApplicationContext(), "proving_code"));

		provingNumber = (Button) view.findViewById(ResourcesIdFactoryUtils
				.getId(mParentActivity.getApplicationContext(),
						"get_proving_number_button"));
		// 获取验证码
		provingNumber.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				String userName = phoneNumber.getText().toString().trim();
				if (!assertPhone(userName)) {
					Toast.makeText(mParentActivity, "请检查手机号码，格式不正确",
							Toast.LENGTH_LONG).show();
				} else if (DeviceTool.isNetworkAvailable(mParentActivity)) {
					CloudPointSDKManager.registerDevice(
							getActivity(),
							DeviceTool.getUniqueId(getActivity()),
							DeviceTool.getSubscriberId(getActivity()),
							DeviceTool.getChannelCode(getActivity(), "CHANNEL"),
							handler, REGISTER_DEVICE);
				} else {
					Toast.makeText(mParentActivity, "网络不可用，请检查网络！",
							Toast.LENGTH_LONG).show();
				}
			}
		});
		user_agreement_check_box = (CheckBox) view
				.findViewById(ResourcesIdFactoryUtils.getId(
						mParentActivity.getApplicationContext(),
						"user_agreement_check_box"));
		user_agree = (TextView) view.findViewById(ResourcesIdFactoryUtils
				.getId(mParentActivity.getApplicationContext(), "user_agree"));
		user_agree.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				if (user_agreement_check_box.isChecked()) {
					user_agreement_check_box.setChecked(false);
				} else {
					user_agreement_check_box.setChecked(true);
				}
			}
		});
		user_agreement_check_box
				.setOnCheckedChangeListener(new OnCheckedChangeListener() {
					@Override
					public void onCheckedChanged(CompoundButton buttonView,
							boolean isChecked) {

					}
				});
		user_agreement = (TextView) view.findViewById(ResourcesIdFactoryUtils
				.getId(mParentActivity.getApplicationContext(),
						"user_agreement"));
		user_agreement.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				Intent intent = new Intent();
				intent.setAction("android.intent.action.VIEW");
				Uri content_url = Uri
						.parse("http://api.cpo2o.com/v1/API/word/copyright.html");
				intent.setData(content_url);
				startActivity(intent);
			}
		});

		submit = (Button) view.findViewById(ResourcesIdFactoryUtils.getId(
				mParentActivity.getApplicationContext(), "proving_submit"));
		// 提交验证手机号

		submit.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				if (!user_agreement_check_box.isChecked()) {
					Toast.makeText(mParentActivity, "请勾选注册协议",
							Toast.LENGTH_SHORT).show();
					return;
				}
				String userName = phoneNumber.getText().toString().trim();
				String YZMCode = provingCode.getText().toString();
				if (!assertPhone(userName)) {
					Toast.makeText(mParentActivity, "请检查手机号码，格式不正确",
							Toast.LENGTH_LONG).show();
				} else if (TextUtils.isEmpty(YZMCode)) {
					Toast.makeText(mParentActivity, "验证码不能为空",
							Toast.LENGTH_LONG).show();
				} else if (4 < YZMCode.length()) {
					Toast.makeText(mParentActivity, "验证码不能大于4位",
							Toast.LENGTH_LONG).show();
				} else if (YZMCode.length() != 4) {
					Toast.makeText(mParentActivity, "验证码不能小于4位",
							Toast.LENGTH_LONG).show();
				} else {

					String uid = LoginMessageDataUtils.getUID(mParentActivity);
					String token = LoginMessageDataUtils
							.getToken(mParentActivity);
					String mdToken = Str_MD5.tokenToMD5(uid, token, "");
					ProvingPhoneProtocol protocol = new ProvingPhoneProtocol();
					protocol.ProvingPhoneProtocol(userName, YZMCode, handler,
							uid, mdToken, PROVING_PHONE);
				}

			}
		});
		return view;
	}

	private static boolean assertPhone(String phoneNumber) {
		Pattern patt = Pattern.compile("^1[3458]\\d{9}$");
		if (patt.matcher(phoneNumber).matches()) {
			return true;
		}
		return false;
	}

	private void dismissDialog() {
		if (mDialog != null && mDialog.isShowing()) {
			mDialog.dismiss();
		}
	}

	/**
	 * 当手机号码注册的时候提示用户 立即登录或者忘记密码了
	 */
	private void tipUser() {
		new AlertDialog.Builder(mParentActivity).setTitle("提示")
				.setMessage("该手机号已经通过验证，请直接登录")
				.setIcon(android.R.drawable.ic_dialog_info)
				.setPositiveButton("立即登录", new DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						mParentActivity.finish();
						Intent intent = new Intent();
						intent.setClass(mParentActivity, LoginAndRegActivity.class);
						((Activity) mParentActivity).startActivityForResult(intent, LOGIN_REQUEST_CODE);
					}
				})
				.setNegativeButton("忘记密码了", new DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						mParentActivity.finish();
						CloudPointSDKManager
								.openFindPasswordView(mParentActivity,
										CloudPointSDKManager.FIND_PASSWORD_REQUEST_CODE);
					}
				}).show();
	}
}
