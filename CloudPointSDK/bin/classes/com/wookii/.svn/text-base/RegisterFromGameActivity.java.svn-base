package com.cloudpoint.cpgamespaysdk.activitis;

import java.util.HashMap;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.Toast;

import com.cloudpoint.cpgamespaysdk.model.UserInfo;
import com.cloudpoint.cpgamespaysdk.protocollManager.ProtocolManager;
import com.cloudpoint.cpgamespaysdk.utils.CountDownTimerUtil;
import com.cloudpoint.cpgamespaysdk.utils.DeviceTool;
import com.cloudpoint.cpgamespaysdk.utils.LoginMessageDataUtils;

public class RegisterFromGameActivity extends Activity {
	public final static int UserRegisterTel_RESULT_CODE = 2;
	public static final String YANGZHENGMA = "YZM";
	protected static final int REGISTER_DEVICE = 0x123;

	private Context activity;

	private EditText mPhoneNumberET, mTokenET, mPasswordET, mConfimPwdET;
	private Button mButtonSubmit, mButtonGetToken;
	private CheckBox user_agreement_check_box;
	private TextView user_agreement, user_agree;
	private ImageButton close;
	private String phoneNumber;
	private String toastInfo;
	private ProgressDialog pd;
	private ProtocolManager dataManager;
	private String LOGIN_FROM_CP = "0";
	private CountDownTimerUtil countDownTimer;

	public static RegisterFromGameActivity newInstance() {
		return new RegisterFromGameActivity();
	}

	private Handler mHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case ProtocolManager.NOTIFICATION:
				if (pd != null) {
					if (pd.isShowing()) {
						pd.dismiss();
					}
				}
				toastInfo = msg.obj.toString();

				Intent intent = new Intent();
				intent.putExtra("JSON", toastInfo);
				// mParentActivity.setResult(UserRegisterTel_RESULT_CODE,
				// intent);
				showToast(toastInfo);
				if (null == dataManager) {
					dataManager = new ProtocolManager(activity, mHandler);
				}
				String deviceId = DeviceTool.getUniqueId(activity);
				String userName = mPhoneNumberET.getText().toString();
				String pwd = mPasswordET.getText().toString();
				// first_login 可选 0：非首次登录 1：首次登录 默认值为 0
				dataManager.login(userName, pwd, deviceId, "1", "",
						LOGIN_FROM_CP);
				// mParentActivity.finish();
				break;
			case ProtocolManager.LOGIN_SUCCESS:
				LoginMessageDataUtils.insertInterimToken(activity, true);
				UserInfo userInfo = (UserInfo) msg.obj;
				LoginMessageDataUtils.insertUID(activity, userInfo.getUid());
				LoginMessageDataUtils.inserttelNum(activity,
						userInfo.getTelNum());
				LoginMessageDataUtils
						.insertToken(activity, userInfo.getToken());
				LoginMessageDataUtils.insertNickName(activity,
						userInfo.getNickName());
				Intent intent4Login = new Intent();
				intent4Login.setAction("com.cloudpoint.taskReceiver");
				activity.sendBroadcast(intent4Login);

				intent4Login.putExtra("JSON", toastInfo);
				setResult(CloudPointSDKManager.SUCCESS, intent4Login);

				finish();
				break;
			case REGISTER_DEVICE:
				LoginMessageDataUtils.insertInterimToken(activity, false);
				HashMap<String, String> dataMap = (HashMap<String, String>) msg.obj;
				String uid = dataMap.get("uid");
				//游戏注册不储存token
//				String token = dataMap.get("token");
				LoginMessageDataUtils.insertUID(activity, uid);
//				LoginMessageDataUtils.insertToken(activity, token);
				
				if (null == dataManager) {
					dataManager = new ProtocolManager(activity, mHandler);
				}
				dataManager.userRegisterTel(phoneNumber, uid);
				if (pd == null) {
					pd = ProgressDialog.show(activity, "", "正在获取验证码...", true,
							true);
				} else {
					pd.show();
				}
				break;
			case ProtocolManager.NETWORK_ERROR:
				if (pd != null) {
					if (pd.isShowing()) {
						pd.dismiss();
					}
				}
				break;

			case ProtocolManager.TIMEOUT_ERROR:

				break;
			case ProtocolManager.NOTIFICATION_RESPONSE_ERRORINFO:
				if (pd != null) {
					if (pd.isShowing()) {
						pd.dismiss();
					}
				}
				toastInfo = msg.obj.toString();
				showToast(toastInfo);
				break;
			case ProtocolManager.NOTIFICATION_SUBMIT_GETCODE:
				if (pd != null) {
					if (pd.isShowing()) {
						pd.dismiss();
					}
				}
				toastInfo = msg.obj.toString();
				// userRegisterTelActivity.insertYZM_CODE(toastInfo);
				showToast("验证码已经发至您的手机，请查收。");
				// 倒计时
				if (null == countDownTimer) {
					countDownTimer = new CountDownTimerUtil(mHandler,
							60 * 1000, 1000);
				}
				countDownTimer.start();
				break;
			case CountDownTimerUtil.TIMER_FINISH:
				mButtonGetToken.setEnabled(true);
				mButtonGetToken.setText("获取验证码");
				break;
			case CountDownTimerUtil.TIMER_TICK:
				mButtonGetToken.setEnabled(false);
				mButtonGetToken.setText("获取验证码(" + msg.arg1 + ")");
				break;
			case ProtocolManager.NOTIFICATION_CHECKINFO:
				toastInfo = msg.obj.toString();
				showToast(toastInfo);
				break;
			default:

				super.handleMessage(msg);
				break;
			}

		}
	};

	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		activity = this;

		int layoutId = ResourcesIdFactoryUtils.getLayoutId(
				activity.getApplicationContext(), "cpsdk_reg_from_game");
		setContentView(layoutId);

		mPhoneNumberET = (EditText) findViewById(ResourcesIdFactoryUtils
				.getId(activity.getApplicationContext(),
						"et_reg_usernumber_from_game"));

		mTokenET = (EditText) findViewById(ResourcesIdFactoryUtils.getId(
				activity.getApplicationContext(), "et_reg_token_from_game"));
		mPasswordET = (EditText) findViewById(ResourcesIdFactoryUtils.getId(
				activity.getApplicationContext(), "et_reg_pass_from_game"));
		mConfimPwdET = (EditText) findViewById(ResourcesIdFactoryUtils.getId(
				activity.getApplicationContext(), "et_reg_repass_from_game"));

		mButtonGetToken = (Button) findViewById(ResourcesIdFactoryUtils
				.getId(activity.getApplicationContext(),
						"btn_get_token_reg_from_game"));
		mButtonGetToken.setOnClickListener(mOnGetTokenClickListener);

		mButtonSubmit = (Button) findViewById(ResourcesIdFactoryUtils.getId(
				activity.getApplicationContext(), "btn_reg_from_game"));
		mButtonSubmit.setOnClickListener(mOnSubmitClickListener);

		user_agreement_check_box = (CheckBox) findViewById(ResourcesIdFactoryUtils
				.getId(activity.getApplicationContext(),
						"user_agreement_check_box_from_game"));
		user_agree = (TextView) findViewById(ResourcesIdFactoryUtils.getId(
				activity.getApplicationContext(), "user_agree_from_game"));
		user_agree.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				if (user_agreement_check_box.isChecked()) {

					mButtonSubmit.setEnabled(true);
					mButtonGetToken.setEnabled(true);
					user_agreement_check_box.setChecked(false);
				} else {
					mButtonSubmit.setEnabled(false);
					mButtonGetToken.setEnabled(false);
					user_agreement_check_box.setChecked(true);
				}
			}
		});
		user_agreement_check_box
				.setOnCheckedChangeListener(new OnCheckedChangeListener() {

					@Override
					public void onCheckedChanged(CompoundButton buttonView,
							boolean isChecked) {
						// TODO Auto-generated method stub
						if (isChecked) {
							mButtonSubmit.setEnabled(true);
							mButtonGetToken.setEnabled(true);
						} else {
							mButtonSubmit.setEnabled(false);
							mButtonGetToken.setEnabled(false);
						}
					}
				});
		user_agreement = (TextView) findViewById(ResourcesIdFactoryUtils.getId(
				activity.getApplicationContext(), "user_agreement_from_game"));
		user_agreement.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				Intent intent = new Intent();
				intent.setAction("android.intent.action.VIEW");
				Uri content_url = Uri
						.parse("http://api.cpo2o.com/v1/API/word/copyright.html");
				intent.setData(content_url);
				// intent.setClassName("com.android.browser",
				// "com.android.browser.BrowserActivity");
				startActivity(intent);
			}
		});
		close = (ImageButton) findViewById(ResourcesIdFactoryUtils.getId(
				activity.getApplicationContext(), "ib_close"));
		close.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View view) {
				finish();
			}
		});
	};

	private OnClickListener mOnGetTokenClickListener = new View.OnClickListener() {
		@Override
		public void onClick(View v) {
			// TelephonyManager tm = (TelephonyManager)
			// mParentActivity.getSystemService(mParentActivity.TELEPHONY_SERVICE);
			phoneNumber = mPhoneNumberET.getText().toString().trim();

			if (TextUtils.isEmpty(phoneNumber)) {
				toastInfo = "手机号码不能为空";
				Toast.makeText(activity, toastInfo, Toast.LENGTH_LONG).show();
			} else if (11 < phoneNumber.length()) {
				toastInfo = "手机号位数大于11位，请确认手机号";
				Toast.makeText(activity, toastInfo, Toast.LENGTH_LONG).show();
			} else if (11 > phoneNumber.length()) {
				toastInfo = "手机号位数不足11位，请确认手机号";
				Toast.makeText(activity, toastInfo, Toast.LENGTH_LONG).show();
			} else {
				// 先注册设备
				if (DeviceTool.isNetworkAvailable(activity) && !CloudPointSDKManager.isLogin(activity)) {
					// 先注册设备
					Context act = activity;
					String imei = DeviceTool.getUniqueId(act);
					String imsi = DeviceTool.getSubscriberId(act);
					String channel = DeviceTool.getChannelCode(act, "CHANNEL");

					CloudPointSDKManager.registerDevice(act, imei, imsi,
							channel, mHandler, REGISTER_DEVICE);
				} else {
					Toast.makeText(activity, "网络不可用，请检查网络！", Toast.LENGTH_LONG)
							.show();
				}
			}

		}
	};

	private OnClickListener mOnSubmitClickListener = new View.OnClickListener() {

		@Override
		public void onClick(View v) {
			TelephonyManager tm = (TelephonyManager) activity
					.getSystemService(Context.TELEPHONY_SERVICE);
			String phoneNumber = mPhoneNumberET.getText().toString();
			String YZMCode = mTokenET.getText().toString();
			String pwd = mPasswordET.getText().toString();
			String pwd2 = mConfimPwdET.getText().toString();
			// String YZMCode2 = userRegisterTelActivity.getYZM_CODE();
			if (TextUtils.isEmpty(phoneNumber)) {
				toastInfo = "手机号码不能为空";
				Toast.makeText(activity, toastInfo, Toast.LENGTH_LONG).show();
			} else if (11 < phoneNumber.length()) {
				toastInfo = "手机号位数大于11位，请确认手机号";
				Toast.makeText(activity, toastInfo, Toast.LENGTH_LONG).show();
			} else if (11 > phoneNumber.length()) {
				toastInfo = "手机号位数不足11位，请确认手机号";
				Toast.makeText(activity, toastInfo, Toast.LENGTH_LONG).show();
			} else if (TextUtils.isEmpty(YZMCode)) {
				toastInfo = "验证码不能为空";
				Toast.makeText(activity, toastInfo, Toast.LENGTH_LONG).show();
			} else if (4 < YZMCode.length()) {
				toastInfo = "验证码不能大于4位";
				Toast.makeText(activity, toastInfo, Toast.LENGTH_LONG).show();
			} else if (TextUtils.isEmpty(pwd)) {
				toastInfo = "密码不能为空";
				Toast.makeText(activity, toastInfo, Toast.LENGTH_LONG).show();
			} else if (6 > pwd.length() || 11 < pwd.length()) {
				toastInfo = "密码不能小于6位或大于11位";
				Toast.makeText(activity, toastInfo, Toast.LENGTH_LONG).show();
			} else if (TextUtils.isEmpty(pwd2)) {
				toastInfo = "确认密码不能为空";
				Toast.makeText(activity, toastInfo, Toast.LENGTH_LONG).show();
			} else if (6 > pwd2.length() || 11 < pwd2.length()) {
				toastInfo = "确认密码不能小于6位或大于11位";
				Toast.makeText(activity, toastInfo, Toast.LENGTH_LONG).show();
			} else if (!pwd.equals(pwd2)) {
				toastInfo = "两次输入的密码不一致，请检查";
				Toast.makeText(activity, toastInfo, Toast.LENGTH_LONG).show();
			} else {
				String uid = LoginMessageDataUtils.getUID(activity);
				if (uid == null) {
					Toast.makeText(activity, "设备未登录，请获取验证码", Toast.LENGTH_LONG)
							.show();
					return;
				}
				// modify by DengBin 20131106
				String deviceId = DeviceTool.getUniqueId(activity);

				dataManager.userRegister(phoneNumber, "", uid, deviceId,
						YZMCode, "", pwd);

				// if (pd == null) {
				pd = ProgressDialog.show(activity, "", "注册中...", true, true);
				// } else {
				// pd.show();
				// }

			}
		}
	};

	public void insertYZM_CODE(String codeId) {
		SharedPreferences sp = activity.getSharedPreferences(YANGZHENGMA, 0);
		SharedPreferences.Editor editor = sp.edit();
		editor.putString("codeId", codeId);
		editor.commit();
	}

	public String getYZM_CODE() {
		SharedPreferences sp = activity.getSharedPreferences(YANGZHENGMA, 0);
		String code = sp.getString("codeId", null);
		return code;
	}

	public void deleteYZM_CODE() {
		SharedPreferences sp = activity.getSharedPreferences(YANGZHENGMA, 0);
		SharedPreferences.Editor editor = sp.edit();
		editor.clear();
		editor.commit();
	}

	public void showToast(String msg) {
		Toast.makeText(this, msg, Toast.LENGTH_LONG).show();
	}

}
