package com.cloudpoint.cpgamespaysdk.protocol;

import java.util.ArrayList;
import java.util.List;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONTokener;

import com.cloudpoint.cpgamespaysdk.protocollManager.BaseProtocol;
import com.cloudpoint.cpgamespaysdk.protocollManager.ProtocolManager;
import com.cloudpoint.cpgamespaysdk.protocollManager.DataProtocolInterface;
import com.cloudpoint.cpgamespaysdk.protocollManager.RequestProtocolTask;

import android.os.Handler;
import android.os.Message;

public class SpendMoneyNoPasswordProtocol extends BaseProtocol implements
		DataProtocolInterface {

	SpendMoneyNoPasswordProtocol spendMoneyProtocol = this;

	Handler mHandler;
	List<NameValuePair> params = new ArrayList<NameValuePair>();
	String PARAM_METHOD_NAME = "PayLogin/spendMoneyNo/";

	public void invokeSpendMoneyNoPassword(String token, String uid,
			String gid, String mlmemo, int money, String validation_id,
			Handler handler, String other_order_id) {

		this.mHandler = handler;

		params.add(new BasicNameValuePair("token", token));
		params.add(new BasicNameValuePair("uid", uid));
		params.add(new BasicNameValuePair("game_code", gid));
		params.add(new BasicNameValuePair("mlmemo", mlmemo));
		params.add(new BasicNameValuePair("money", String.valueOf(money)));
		params.add(new BasicNameValuePair("validation_id", validation_id));
		if (!"".equals(other_order_id) || other_order_id != null) {
			params.add(new BasicNameValuePair("other_order_id", other_order_id));
		}
		RequestProtocolTask httpRequestTask = new RequestProtocolTask(
				PARAM_METHOD_NAME, params, spendMoneyProtocol);
		Thread thread = new Thread(httpRequestTask);
		thread.start();

	}

	@Override
	public void onResposeProcotolData(Object object) {
		// TODO Auto-generated method stub
		if (object != null) {

			try {
				Object json = new JSONTokener(object.toString()).nextValue();
				if (json instanceof JSONObject) {
					JSONObject jsonObject = new JSONObject(object.toString());
					String code = jsonObject.getString("code");
					if (code.equals("100000")) {
						Object data = jsonObject.getString("data");
						JSONObject dataObject = new JSONObject(data.toString());
						String balanceAmount = dataObject
								.getString("balance_amount");
						Message msg = mHandler
								.obtainMessage(ProtocolManager.NOTIFICATION);
						msg.obj = balanceAmount;
						mHandler.sendMessage(msg);
					} else {
						Message msg = mHandler
								.obtainMessage(ProtocolManager.NOTIFICATION_RESPONSE_ERRORINFO);
						msg.obj = jsonObject.getString("msg");
						mHandler.sendMessage(msg);
					}
				}
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		} else {
			Message msg = mHandler.obtainMessage(ProtocolManager.NETWORK_ERROR);

			mHandler.sendMessage(msg);
		}
	}

}
