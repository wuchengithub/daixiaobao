package com.cloudpoint.cpgamespaysdk.activitis;

import java.util.HashMap;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.cloudpoint.cpgamespaysdk.model.UserInfo;
import com.cloudpoint.cpgamespaysdk.protocollManager.ProtocolManager;
import com.cloudpoint.cpgamespaysdk.utils.CountDownTimerUtil;
import com.cloudpoint.cpgamespaysdk.utils.DeviceTool;
import com.cloudpoint.cpgamespaysdk.utils.LoginMessageDataUtils;

public class RegisterFragment extends Fragment {
	public final static int UserRegisterTel_RESULT_CODE = 2;
	public static final String YANGZHENGMA = "YZM";
	protected static final int REGISTER_DEVICE = 0x123;

	private LoginAndRegActivity mParentActivity;

	private EditText mPhoneNumberET, mTokenET, mPasswordET, mConfimPwdET;
	private Button mButtonSubmit, mButtonGetToken;
	private CheckBox user_agreement_check_box;
	private TextView user_agreement, user_agree;
	private String phoneNumber;
	private String toastInfo;
	private ProgressDialog pd;
	private String LOGIN_FROM_CP = "0";
	ProtocolManager dataManager;

	private CountDownTimerUtil countDownTimer;

	public static RegisterFragment newInstance() {
		return new RegisterFragment();
	}

	private Handler mHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case ProtocolManager.NOTIFICATION:
				if (pd != null) {
					if (pd.isShowing()) {
						pd.dismiss();
					}
				}
				toastInfo = msg.obj.toString();

				Intent intent = new Intent();
				intent.putExtra("JSON", toastInfo);
				// mParentActivity.setResult(UserRegisterTel_RESULT_CODE,
				// intent);
				mParentActivity.showToast(toastInfo);
				dataManager = new ProtocolManager(mParentActivity, mHandler);
				String deviceId = DeviceTool.getUniqueId(mParentActivity);
				String userName = mPhoneNumberET.getText().toString();
				String pwd = mPasswordET.getText().toString();
				// first_login 可选 0：非首次登录 1：首次登录 默认值为 0
				dataManager.login(userName, pwd, deviceId, "1", "",
						LOGIN_FROM_CP);
				// mParentActivity.finish();
				break;
			case ProtocolManager.LOGIN_SUCCESS:
				UserInfo userInfo = (UserInfo) msg.obj;
				LoginMessageDataUtils.insertUID(mParentActivity,
						userInfo.getUid());
				LoginMessageDataUtils.inserttelNum(mParentActivity,
						mPhoneNumberET.getText().toString());
				LoginMessageDataUtils.insertToken(mParentActivity,
						userInfo.getToken());
				LoginMessageDataUtils.insertNickName(mParentActivity,
						userInfo.getNickName());
				Intent intent4Broadcast = new Intent();
				intent4Broadcast.setAction("com.cloudpoint.taskReceiver");
				// 十一活动注册成功直接登录并打开我的礼包详情
				// intent4Broadcast.putExtra("guide", "guide");
				mParentActivity.sendBroadcast(intent4Broadcast);
				mParentActivity.finish();
				break;
			case REGISTER_DEVICE:
				LoginMessageDataUtils
						.insertInterimToken(mParentActivity, false);
				HashMap<String, String> dataMap = (HashMap<String, String>) msg.obj;
				String uid = dataMap.get("uid");
//				String token = dataMap.get("token");
				LoginMessageDataUtils.insertUID(mParentActivity, uid);
//				LoginMessageDataUtils.insertToken(mParentActivity, token);

				dataManager.userRegisterTel(phoneNumber, uid);
				break;
			case ProtocolManager.NETWORK_ERROR:
				if (pd != null) {
					if (pd.isShowing()) {
						pd.dismiss();
					}
				}
				break;

			case ProtocolManager.TIMEOUT_ERROR:

				break;
			case ProtocolManager.NOTIFICATION_RESPONSE_ERRORINFO:
				if (pd != null) {
					if (pd.isShowing()) {
						pd.dismiss();
					}
				}
				toastInfo = msg.obj.toString();
				mParentActivity.showToast(toastInfo);
				break;
			case ProtocolManager.NOTIFICATION_SUBMIT_GETCODE:
				if (pd != null) {
					if (pd.isShowing()) {
						pd.dismiss();
					}
				}
				toastInfo = msg.obj.toString();
				// userRegisterTelActivity.insertYZM_CODE(toastInfo);
				mParentActivity.showToast("验证码已经发至您的手机，请查收。");
				// 倒计时
				if (null == countDownTimer) {
					countDownTimer = new CountDownTimerUtil(mHandler,
							60 * 1000, 1000);
				}
				countDownTimer.start();
				break;
			case CountDownTimerUtil.TIMER_FINISH:
				mButtonGetToken.setEnabled(true);
				mButtonGetToken.setText("获取验证码");
				break;
			case CountDownTimerUtil.TIMER_TICK:
				mButtonGetToken.setEnabled(false);
				mButtonGetToken.setText("获取验证码(" + msg.arg1 + ")");
				break;
			/*
			 * case ProtocolManager.NOTIFICATION_NOTREGISTERLOGIN: toastInfo =
			 * msg.obj.toString();
			 * LoginMessageDataUtils.insertUID(mParentActivity, toastInfo);
			 * mParentActivity.showToast(toastInfo);
			 * 
			 * String uid = LoginMessageDataUtils.getUID(mParentActivity);
			 * dataManager.userRegisterTel(phoneNumber, uid); String code =
			 * getYZM_CODE(); if (!TextUtils.isEmpty(code)) { deleteYZM_CODE();
			 * } break;
			 */
			default:

				super.handleMessage(msg);
				break;
			}

		}
	};

	@Override
	public void onAttach(Activity activity) {
		super.onAttach(activity);
		mParentActivity = (LoginAndRegActivity) activity;
		dataManager = new ProtocolManager(mParentActivity, mHandler);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		int layoutId = ResourcesIdFactoryUtils.getLayoutId(
				mParentActivity.getApplicationContext(), "cpsdk_register");
		View view = inflater.inflate(layoutId, container, false);

		mPhoneNumberET = (EditText) view.findViewById(ResourcesIdFactoryUtils
				.getId(mParentActivity.getApplicationContext(),
						"input_phone_number"));

		mTokenET = (EditText) view.findViewById(ResourcesIdFactoryUtils.getId(
				mParentActivity.getApplicationContext(), "input_token"));
		mPasswordET = (EditText) view.findViewById(ResourcesIdFactoryUtils
				.getId(mParentActivity.getApplicationContext(),
						"input_password"));
		mConfimPwdET = (EditText) view.findViewById(ResourcesIdFactoryUtils
				.getId(mParentActivity.getApplicationContext(),
						"confirm_password"));

		mButtonGetToken = (Button) view.findViewById(ResourcesIdFactoryUtils
				.getId(mParentActivity.getApplicationContext(),
						"get_token_button"));
		mButtonGetToken.setOnClickListener(mOnGetTokenClickListener);

		mButtonSubmit = (Button) view.findViewById(ResourcesIdFactoryUtils
				.getId(mParentActivity.getApplicationContext(),
						"btnId_for_submit_login"));
		mButtonSubmit.setOnClickListener(mOnSubmitClickListener);

		user_agreement_check_box = (CheckBox) view
				.findViewById(ResourcesIdFactoryUtils.getId(
						mParentActivity.getApplicationContext(),
						"user_agreement_check_box"));
		user_agree = (TextView) view.findViewById(ResourcesIdFactoryUtils
				.getId(mParentActivity.getApplicationContext(), "user_agree"));
		user_agree.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				if (user_agreement_check_box.isChecked()) {

					mButtonSubmit.setEnabled(true);
					mButtonGetToken.setEnabled(true);
					user_agreement_check_box.setChecked(false);
				} else {
					mButtonSubmit.setEnabled(false);
					mButtonGetToken.setEnabled(false);
					user_agreement_check_box.setChecked(true);
				}
			}
		});
		user_agreement_check_box
				.setOnCheckedChangeListener(new OnCheckedChangeListener() {

					@Override
					public void onCheckedChanged(CompoundButton buttonView,
							boolean isChecked) {
						// TODO Auto-generated method stub
						if (isChecked) {
							mButtonSubmit.setEnabled(true);
							mButtonGetToken.setEnabled(true);
						} else {
							mButtonSubmit.setEnabled(false);
							mButtonGetToken.setEnabled(false);
						}
					}
				});
		user_agreement = (TextView) view.findViewById(ResourcesIdFactoryUtils
				.getId(mParentActivity.getApplicationContext(),
						"user_agreement"));
		user_agreement.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				Intent intent = new Intent();
				intent.setAction("android.intent.action.VIEW");
				Uri content_url = Uri
						.parse("http://api.cpo2o.com/v1/API/word/copyright.html");
				intent.setData(content_url);
				// intent.setClassName("com.android.browser",
				// "com.android.browser.BrowserActivity");
				startActivity(intent);
			}
		});
		return view;
	}

	/**
	 * 获取验证码按钮监听
	 */
	private OnClickListener mOnGetTokenClickListener = new View.OnClickListener() {
		@Override
		public void onClick(View v) {
			// TelephonyManager tm = (TelephonyManager)
			// mParentActivity.getSystemService(mParentActivity.TELEPHONY_SERVICE);
			phoneNumber = mPhoneNumberET.getText().toString().trim();

			if (TextUtils.isEmpty(phoneNumber)) {
				toastInfo = "手机号码不能为空";
				Toast.makeText(mParentActivity, toastInfo, Toast.LENGTH_LONG)
						.show();
			} else if (11 < phoneNumber.length()) {
				toastInfo = "手机号位数大于11位，请确认手机号";
				Toast.makeText(mParentActivity, toastInfo, Toast.LENGTH_LONG)
						.show();
			} else if (11 > phoneNumber.length()) {
				toastInfo = "手机号位数不足11位，请确认手机号";
				Toast.makeText(mParentActivity, toastInfo, Toast.LENGTH_LONG)
						.show();
			} else {
				// 先注册设备
				if (DeviceTool.isNetworkAvailable(mParentActivity)) {
					CloudPointSDKManager
							.registerDevice(getActivity(), DeviceTool
									.getUniqueId(getActivity()), DeviceTool
									.getSubscriberId(getActivity()), DeviceTool
									.getChannelCode(getActivity(), "CHANNEL"),
									mHandler, REGISTER_DEVICE);
					if (pd == null) {
						pd = ProgressDialog.show(mParentActivity, "",
								"正在获取验证码...", true, true);
					} else {
						pd.show();
					}
				} else {
					Toast.makeText(mParentActivity, "网络不可用，请检查网络！",
							Toast.LENGTH_LONG).show();
				}
			}

		}
	};

	private OnClickListener mOnSubmitClickListener = new View.OnClickListener() {

		@Override
		public void onClick(View v) {
			TelephonyManager tm = (TelephonyManager) mParentActivity
					.getSystemService(Context.TELEPHONY_SERVICE);
			String phoneNumber = mPhoneNumberET.getText().toString();
			String YZMCode = mTokenET.getText().toString();
			String pwd = mPasswordET.getText().toString();
			String pwd2 = mConfimPwdET.getText().toString();
			// String YZMCode2 = userRegisterTelActivity.getYZM_CODE();
			if (TextUtils.isEmpty(phoneNumber)) {
				toastInfo = "手机号码不能为空";
				Toast.makeText(mParentActivity, toastInfo, Toast.LENGTH_LONG)
						.show();
			} else if (11 < phoneNumber.length()) {
				toastInfo = "手机号位数大于11位，请确认手机号";
				Toast.makeText(mParentActivity, toastInfo, Toast.LENGTH_LONG)
						.show();
			} else if (11 > phoneNumber.length()) {
				toastInfo = "手机号位数不足11位，请确认手机号";
				Toast.makeText(mParentActivity, toastInfo, Toast.LENGTH_LONG)
						.show();
			} else if (TextUtils.isEmpty(YZMCode)) {
				toastInfo = "验证码不能为空";
				Toast.makeText(mParentActivity, toastInfo, Toast.LENGTH_LONG)
						.show();
			} else if (4 < YZMCode.length()) {
				toastInfo = "验证码不能大于4位";
				Toast.makeText(mParentActivity, toastInfo, Toast.LENGTH_LONG)
						.show();
			} else if (TextUtils.isEmpty(pwd)) {
				toastInfo = "密码不能为空";
				Toast.makeText(mParentActivity, toastInfo, Toast.LENGTH_LONG)
						.show();
			} else if (6 > pwd.length() || 11 < pwd.length()) {
				toastInfo = "密码不能小于6位或大于11位";
				Toast.makeText(mParentActivity, toastInfo, Toast.LENGTH_LONG)
						.show();
			} else if (TextUtils.isEmpty(pwd2)) {
				toastInfo = "确认密码不能为空";
				Toast.makeText(mParentActivity, toastInfo, Toast.LENGTH_LONG)
						.show();
			} else if (6 > pwd2.length() || 11 < pwd2.length()) {
				toastInfo = "确认密码不能小于6位或大于11位";
				Toast.makeText(mParentActivity, toastInfo, Toast.LENGTH_LONG)
						.show();
			} else if (!pwd.equals(pwd2)) {
				toastInfo = "两次输入的密码不一致，请检查";
				Toast.makeText(mParentActivity, toastInfo, Toast.LENGTH_LONG)
						.show();
			} else {
				String uid = LoginMessageDataUtils.getUID(mParentActivity);
				if (uid == null) {
					Toast.makeText(mParentActivity, "设备未登录，请获取验证码",
							Toast.LENGTH_LONG).show();
					return;
				}
				// modify by DengBin 20131106
				String deviceId = DeviceTool.getUniqueId(mParentActivity);

				dataManager.userRegister(phoneNumber, "", uid, deviceId,
						YZMCode, "", pwd);

				// if (pd == null) {
				pd = ProgressDialog.show(mParentActivity, "", "注册中...", true,
						true);
				// } else {
				// pd.show();
				// }

			}
		}
	};

	public void insertYZM_CODE(String codeId) {
		SharedPreferences sp = mParentActivity.getSharedPreferences(
				YANGZHENGMA, 0);
		SharedPreferences.Editor editor = sp.edit();
		editor.putString("codeId", codeId);
		editor.commit();
	}

	public String getYZM_CODE() {
		SharedPreferences sp = mParentActivity.getSharedPreferences(
				YANGZHENGMA, 0);
		String code = sp.getString("codeId", null);
		return code;
	}

	public void deleteYZM_CODE() {
		SharedPreferences sp = mParentActivity.getSharedPreferences(
				YANGZHENGMA, 0);
		SharedPreferences.Editor editor = sp.edit();
		editor.clear();
		editor.commit();
	}

}
