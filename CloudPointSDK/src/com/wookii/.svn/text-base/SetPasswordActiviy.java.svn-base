package com.cloudpoint.cpgamespaysdk.activitis;

import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Toast;

import com.cloudpoint.cpgamespaysdk.model.UserInfo;
import com.cloudpoint.cpgamespaysdk.protocollManager.ProtocolManager;
import com.cloudpoint.cpgamespaysdk.utils.DeviceTool;
import com.cloudpoint.cpgamespaysdk.utils.LoginMessageDataUtils;

/**
 * 验证手机号码之后设置密码 调用原来忘记密码接口，设置新的密码 （原来验证码去掉 直接从验证手号获取） 设置成功之后直接调用登录
 * 
 * @author cloudpoint_android
 * 
 */
public class SetPasswordActiviy extends Activity {

	private ProtocolManager dataManager;
	private Context context;
	private ImageView mBackView;
	private EditText mNewPasswordET;
	private Button mSubmitButton;
	private String mPhoneNumber;
	private String yzCode;// 验证码
	private Handler mHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case ProtocolManager.NOTIFICATION_FORGET_PASSWORD:
				Toast.makeText(context, "密码设置成功", Toast.LENGTH_LONG).show();
				dataManager = new ProtocolManager(context, mHandler);
				String deviceId = DeviceTool.getUniqueId(context);
				// 调用游戏登录不需要传入验证码
				dataManager.login(mPhoneNumber, mNewPasswordET.getText()
						.toString().trim(), deviceId, "0", "", "1");
				break;
			case ProtocolManager.NETWORK_ERROR:
				Toast.makeText(context, "网络异常", Toast.LENGTH_LONG).show();
				break;
			case ProtocolManager.NOTIFICATION_RESPONSE_ERRORINFO:
				Toast.makeText(context, msg.obj.toString(), Toast.LENGTH_LONG)
						.show();
			case ProtocolManager.LOGIN_SUCCESS:
				finish();
				// 设置登录真实token为true
				LoginMessageDataUtils.insertInterimToken(context, true);
				UserInfo userInfo = (UserInfo) msg.obj;
				LoginMessageDataUtils.insertUID(context, userInfo.getUid());
				LoginMessageDataUtils.inserttelNum(context,
						userInfo.getTelNum());
				LoginMessageDataUtils.insertToken(context, userInfo.getToken());
				LoginMessageDataUtils.insertNickName(context,
						userInfo.getNickName());
				break;
			}
		}
	};

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		int layoutId = ResourcesIdFactoryUtils.getLayoutId(
				getApplicationContext(), "cpsdk_set_password_layout");
		setContentView(layoutId);
		this.context = SetPasswordActiviy.this;
		dataManager = new ProtocolManager(this, mHandler);
		mBackView = (ImageView) findViewById(ResourcesIdFactoryUtils.getId(
				getApplicationContext(), "back"));
		mBackView.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				finish();
			}
		});
		mNewPasswordET = (EditText) findViewById(ResourcesIdFactoryUtils.getId(
				getApplicationContext(), "input_new_password"));
		mSubmitButton = (Button) findViewById(ResourcesIdFactoryUtils.getId(
				getApplicationContext(), "button_submit"));
		mSubmitButton.setOnClickListener(mOnSubmitClickListener);
		yzCode = getIntent().getStringExtra("yzCode");
		mPhoneNumber = getIntent().getStringExtra("phoneNumber");
	}

	/**
	 * 请求设置密码接口
	 */
	private OnClickListener mOnSubmitClickListener = new View.OnClickListener() {
		@Override
		public void onClick(View v) {
			String newpwd = mNewPasswordET.getText().toString().trim();
			if (6 > newpwd.length() || 16 < newpwd.length()) {
				Toast.makeText(context, "密码长度不正确，请输入6-16位密码", Toast.LENGTH_LONG)
						.show();
			} else {
				Toast.makeText(context, "处理中...", Toast.LENGTH_LONG).show();
				dataManager.resetPassword(mPhoneNumber, newpwd, yzCode);
			}
		}
	};

}
